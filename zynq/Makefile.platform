ZYNQ_SRC  := $(FREERTOS_ROOT)/zynq
ZYNQ_BSP  := $(FREERTOS_ROOT)/zynq/bsp
BSP_INC   := -I$(ZYNQ_BSP)/ps7_cortexa9_0/include

CFLAGS_EXTRA := $(BSP_INC) -I$(ZYNQ_SRC)
ASFLAGS_EXTRA := $(BSP_INC) -I$(ZYNQ_SRC)
LDFLAGS_EXTRA += -Xlinker --gc-sections

FSBL ?= zedboard
DESIGN_FPGA ?=

# Create rules to build a FreeRTOS application.
# It accepts name of the application, linker script
# object dependencies.
# Example:
#
#   $(eval $(call make_project,hello_world,linker.ld,leds_blink.o))
#
define make_project
all: build-$(1)
build-$(1): LDFLAGS_EXTRA += -Xlinker -T$(2) -Xlinker -Map=$(1).map
build-$(1): prepare-$(1) compile-$(1) finish-$(1)
prepare-$(1):
	$(Q) echo "Building FreeRTOS application $(1)" >&2
compile-$(1): $(1)
	$(Q) ln -vf $(1) userapp.elf

$(1): $(1).o $(3)
$(1): $(FREERTOS_ROOT)/zynq/printf-stdarg.o $(FREERTOS_ROOT)/zynq/asm_vectors.o $(FREERTOS_ROOT)/zynq/tick_config.o
$(1): $(FREERTOS_ROOT)/zynq/platform_dependent.o
$(1): libfreertos.a
$(1): $$(ZYNQ_OBJ)
$(1): $$(DRIVERS)

finish-$(1): BOOT.BIN
	$(Q) echo "Build of $(1) successful" >&2
	$(Q) $(SIZE) userapp.elf
	$(Q) ls -l $$<
clean-$(1):
	$(Q) $(RM) $(1).o $(3)
	$(Q) $(RM) $(FREERTOS_ROOT)/zynq/printf-stdarg.o $(FREERTOS_ROOT)/zynq/asm_vectors.o $(FREERTOS_ROOT)/zynq/tick_config.o
	$(Q) $(RM) $(FREERTOS_ROOT)/zynq/platform_dependent.o
	$(Q) $(RM) $(ZYNQ_OBJ)
distclean-$(1): clean-$(1)
	$(Q) $(RM) $(1) $(1).map userapp.elf

clean: clean-$(1)
distclean: distclean-$(1)
endef

BOOT.BIN: system.bif
	$(Q) bootgen -image system.bif -w on -o i $@
system.bif: userapp.elf fsbl.elf $(DESIGN_FPGA)
	$(Q) echo "romfile:"              > $@
	$(Q) echo "{"                    >> $@
	$(Q) echo "[bootloader]fsbl.elf" >> $@
	$(Q) test -f "$(DESIGN_FPGA)"    \
		&& echo "$(DESIGN_FPGA)" >> $@ \
		|| echo "No design for FPGA has been specified (DESIGN_FPGA)" >&2
	$(Q) echo "userapp.elf"          >> $@
	$(Q) echo "}"                    >> $@
fsbl.elf: $(FREERTOS_ROOT)/zynq/fsbl/$(FSBL).elf
	$(Q) ln -vf $< $@

clean-BOOT.BIN:
	$(Q) $(RM) system.bif fsbl.elf system.mem
distclean-BOOT.BIN: clean-BOOT.BIN
	$(Q) $(RM) BOOT.BIN

clean: clean-BOOT.BIN
distclean: distclean-BOOT.BIN

#####################################

ZYNQ_CORE_OBJ := _exit.o _open.o _sbrk.o abort.o close.o errno.o fcntl.o \
             fstat.o getpid.o inbyte.o isatty.o kill.o lseek.o open.o \
             outbyte.o print.o putnum.o read.o sbrk.o sleep.o smc.o uart.o \
             unlink.o usleep.o vectors.o write.o xil_assert.o xil_cache.o \
             xil_exception.o xil_io.o xil_misc_psreset_api.o xil_mmu.o \
             xil_printf.o xl2cc_counter.o xpm_counter.o xtime_l.o \
	     cpu_init.o asm_vectors.o boot.o translation_table.o \
	     xil-crt0.o
SCU_OBJ := xscugic.o xscugic_g.o xscugic_hw.o xscugic_intr.o xscugic_sinit.o
SCUTMR_OBJ := xscutimer.o xscutimer_g.o xscutimer_sinit.o

ZYNQ_OBJ = $(ZYNQ_CORE_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/standalone_v4_1/src/%) \
      $(SCU_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scugic_v2_1/src/%) \
      $(SCUTMR_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scutimer_v2_0/src/%)

#####################################

SCUWDT_OBJ := xscuwdt.o xscuwdt_g.o xscuwdt_sinit.o
DEVCFG_OBJ := xdevcfg.o xdevcfg_g.o xdevcfg_hw.o xdevcfg_intr.o xdevcfg_sinit.o
UARTPS_OBJ := xuartps_g.o xuartps_hw.o xuartps_intr.o xuartps.o xuartps_options.o  xuartps_sinit.o
USBPS_OBJ  := xusbps_endpoint.o xusbps_g.o xusbps_hw.o xusbps_intr.o xusbps.o xusbps_sinit.o
GPIOPS_OBJ := xgpiops.o xgpiops_g.o xgpiops_hw.o xgpiops_intr.o xgpiops_sinit.o
DMAPS_OBJ  := xdmaps.o xdmaps_g.o xdmaps_hw.o xdmaps_sinit.o
SDPS_OBJ   := xsdps.o xsdps_g.o xsdps_options.o xsdps_sinit.o
EMACPS_OBJ := xemacps.o xemacps_bdring.o xemacps_control.o xemacps_g.o xemacps_hw.o xemacps_intr.o xemacps_sinit.o
QSPIPS_OBJ := xqspips.o xqspips_g.o xqspips_hw.o xqspips_options.o xqspips_sinit.o
IICPS_OBJ  := xiicps_g.o xiicps_hw.o xiicps_intr.o xiicps_options.o xiicps_sinit.o \
              xiicps.o xiicps_master.o xiicps_slave.o
TTCPS_OBJ  := xttcps.o xttcps_g.o xttcps_options.o xttcps_sinit.o
XADCPS_OBJ := xadcps.o xadcps_g.o xadcps_intr.o xadcps_sinit.o

CONFIG_SCUWDT ?= y
CONFIG_DEVCFG ?= y
CONFIG_UARTPS ?= y

define make_driver
lib$(1).a: $(2)
	$(Q) $(AR) rcs $$@ $$^
clean-$(1):
	$(Q) $(RM) $(2)
distclean-$(1): clean-$(1)
	$(Q) $(RM) lib$(1).a

clean-drivers: clean-$(1)
distclean-drivers: distclean-$(1)

ifeq ($(strip $(3)),y)
DRIVERS += lib$(1).a
endif
endef

$(eval $(call make_driver,scuwdt,\
	$(SCUWDT_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scuwdt_v2_0/src/%),\
	$(CONFIG_SCUWDT)))
$(eval $(call make_driver,devcfg,\
	$(DEVCFG_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/devcfg_v3_1/src/%),\
	$(CONFIG_DEVCFG)))
$(eval $(call make_driver,uartps,\
	$(UARTPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/uartps_v2_1/src/%),\
	$(CONFIG_UARTPS)))
$(eval $(call make_driver,usbps,\
	$(USBPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/usbps_v2_1/src/%),\
	$(CONFIG_USBPS)))
$(eval $(call make_driver,dmaps,\
	$(DMAPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/dmaps_v2_0/src/%),\
	$(CONFIG_DMAPS)))
$(eval $(call make_driver,gpiops,\
	$(GPIOPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/gpiops_v2_1/src/%),\
	$(CONFIG_GPIOPS)))
$(eval $(call make_driver,sdps,\
	$(SDPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/sdps_v2_1/src/%),\
	$(CONFIG_SDPS)))
$(eval $(call make_driver,emacps,\
	$(EMACPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/emacps_v2_0/src/%),\
	$(CONFIG_EMACPS)))
$(eval $(call make_driver,qspips,\
	$(QSPIPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/qspips_v3_0/src/%),\
	$(CONFIG_QSPIPS)))
$(eval $(call make_driver,ttcps,\
	$(TTCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/ttcps_v2_0/src/%),\
	$(CONFIG_TTCPS)))
$(eval $(call make_driver,xadcps,\
	$(XADCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/xadcps_v2_0/src/%),\
	$(CONFIG_XADCPS)))
$(eval $(call make_driver,iicps,\
	$(IICPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/iicps_v2_1/src/%),\
	$(CONFIG_IICPS)))

clean: clean-drivers
distclean: distclean-drivers
