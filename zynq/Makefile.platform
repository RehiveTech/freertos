include ../Makefile.inc

ZYNQ_SRC  := $(FREERTOS_ROOT)/zynq
ZYNQ_BSP  := $(FREERTOS_ROOT)/zynq/bsp
BSP_INC   := -I$(ZYNQ_BSP)/ps7_cortexa9_0/include

CFLAGS_EXTRA := $(BSP_INC) -I$(ZYNQ_SRC)
ASFLAGS_EXTRA := $(BSP_INC) -I$(ZYNQ_SRC)
LDFLAGS_EXTRA += -Xlinker --gc-sections

FSBL ?= zedboard

# Create rules to build a FreeRTOS application.
# It accepts name of the application and its
# object dependencies.
# Example:
#
#   $(eval $(call make_project,hello_world,leds_blink.o))
#
define make_project
all: build-$(1)
build-$(1): prepare-$(1) compile-$(1) finish-$(1)
prepare-$(1):
	@echo "Building FreeRTOS application $(1)" >&2
compile-$(1): $(1)
	ln -vf $(1) userapp.elf

$(1): $(1).o $(2)
$(1): printf-stdarg.o platform.o serial.o asm_vectors.o tick_config.o
$(1): libfreertos.a
$(1): $$(ZYNQ_OBJ)
$(1): $$(DRIVERS)

finish-$(1): BOOT.BIN
	@echo "Build of $(1) successful" >&2
	$(SIZE) userapp.elf
	ls -l $$<
clean-$(1):
	$(RM) $(1).o $(2)
	$(RM) printf-stdarg.o platform.o serial.o asm_vectors.o tick_config.o
	$(RM) $(ZYNQ_OBJ)
distclean-$(1): clean-$(1)
	$(RM) $(1) userapp.elf

clean: clean-$(1)
distclean: distclean-$(1)
endef

BOOT.BIN: system.bif
	bootgen -image system.bif -w on -o i $@
system.bif: userapp.elf fsbl.elf
	echo "romfile:"              > $@
	echo "{"                    >> $@
	echo "[bootloader]fsbl.elf" >> $@
	echo "userapp.elf"          >> $@
	echo "}"                    >> $@
fsbl.elf: fsbl/$(FSBL).elf
	ln -vf $< $@

clean-BOOT.BIN:
	$(RM) system.bif fsbl.elf system.mem
distclean-BOOT.BIN: clean-BOOT.BIN
	$(RM) BOOT.BIN

clean: clean-BOOT.BIN
distclean: distclean-BOOT.BIN

#####################################

ZYNQ_CORE_OBJ := _exit.o _open.o _sbrk.o abort.o close.o errno.o fcntl.o \
             fstat.o getpid.o inbyte.o isatty.o kill.o lseek.o open.o \
             outbyte.o print.o putnum.o read.o sbrk.o sleep.o smc.o uart.o \
             unlink.o usleep.o vectors.o write.o xil_assert.o xil_cache.o \
             xil_exception.o xil_io.o xil_misc_psreset_api.o xil_mmu.o \
             xil_printf.o xl2cc_counter.o xpm_counter.o xtime_l.o \
	     cpu_init.o asm_vectors.o boot.o translation_table.o \
	     xil-crt0.o
SCU_OBJ := xscugic.o xscugic_g.o xscugic_hw.o xscugic_intr.o xscugic_sinit.o
SCUTMR_OBJ := xscutimer.o xscutimer_g.o xscutimer_sinit.o

ZYNQ_OBJ = $(ZYNQ_CORE_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/standalone_v4_1/src/%) \
      $(SCU_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scugic_v2_1/src/%) \
      $(SCUTMR_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scutimer_v2_0/src/%)

#####################################

SCUWDT_OBJ := xscuwdt.o xscuwdt_g.o xscuwdt_sinit.o
DEVCFG_OBJ := xdevcfg.o xdevcfg_g.o xdevcfg_hw.o xdevcfg_intr.o xdevcfg_sinit.o
UARTPS_OBJ := xuartps_g.o xuartps_hw.o xuartps_intr.o xuartps.o xuartps_options.o  xuartps_sinit.o
USBPS_OBJ  := xusbps_endpoint.o xusbps_g.o xusbps_hw.o xusbps_intr.o xusbps.o xusbps_sinit.o
GPIOPS_OBJ := xgpiops.o xgpiops_g.o xgpiops_hw.o xgpiops_intr.o xgpiops_sinit.o
DMAPS_OBJ  := xdmaps.o xdmaps_g.o xdmaps_hw.o xdmaps_sinit.o
SDPS_OBJ   := xsdps.o xsdps_g.o xsdps_options.o xsdps_sinit.o
EMACPS_OBJ := xemacps.o xemacps_bdring.o xemacps_control.o xemacps_g.o xemacps_hw.o xemacps_intr.o xemacps_sinit.o
QSPIPS_OBJ := xqspips.o xqspips_g.o xqspips_hw.o xqspips_options.o xqspips_sinit.o
IICPS_OBJ  := xiicps_g.o xiicps_hw.o xiicps_intr.o xiicps_options.o xiicps_sinit.o \
              xiicps.o xiicps_master.o xiicps_slave.o
TTCPS_OBJ  := xttcps.o xttcps_g.o xttcps_options.o xttcps_sinit.o
XADCPS_OBJ := xadcps.o xadcps_g.o xadcps_intr.o xadcps_sinit.o

CONFIG_SCUWDT ?= y
CONFIG_DEVCFG ?= y
CONFIG_UARTPS ?= y

libscuwdt.a: $(SCUWDT_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scuwdt_v2_0/src/%)
	$(AR) rcs $@ $^
clean-scuwdt:
	$(RM) $(SCUWDT_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/scuwdt_v2_0/src/%)
distclean-scuwdt: clean-scuwdt
	$(RM) libscuwdt.a

ifeq ($(CONFIG_SCUWDT),y)
DRIVERS += libscuwdt.a
endif

libdevcfg.a: $(DEVCFG_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/devcfg_v3_1/src/%)
	$(AR) rcs $@ $^
clean-devcfg:
	$(RM) $(DEVCFG_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/devcfg_v3_1/src/%)
distclean-devcfg: clean-devcfg
	$(RM) libdevcfg.a

ifeq ($(CONFIG_DEVCFG),y)
DRIVERS += libdevcfg.a
endif

libuartps.a: $(UARTPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/uartps_v2_1/src/%)
	$(AR) rcs $@ $^
clean-uartps:
	$(RM) $(UARTPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/uartps_v2_1/src/%)
distclean-uartps: clean-uartps
	$(RM) libuartps.a

ifeq ($(CONFIG_UARTPS),y)
DRIVERS += libuartps.a
endif

libusbps.a: $(USBPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/usbps_v2_1/src/%)
	$(AR) rcs $@ $^
clean-usbps:
	$(RM) $(USBPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/usbps_v2_1/src/%)
distclean-usbps: clean-usbps
	$(RM) libusbps.a

ifeq ($(CONFIG_USBPS),y)
DRIVERS += libusbps.a
endif

libdmaps.a: $(DMAPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/dmaps_v2_0/src/%)
	$(AR) rcs $@ $^
clean-dmaps:
	$(RM) $(DMAPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/dmaps_v2_0/src/%)
distclean-dmaps: clean-dmaps
	$(RM) libdmaps.a

ifeq ($(CONFIG_DMAPS),y)
DRIVERS += libdmaps.a
endif

libgpiops.a: $(GPIOPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/gpiops_v2_1/src/%)
	$(AR) rcs $@ $^
clean-gpiops:
	$(RM) $(GPIOPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/gpiops_v2_1/src/%)
distclean-gpiops: clean-gpiops
	$(RM) libgpiops.a

ifeq ($(CONFIG_GPIOPS),y)
DRIVERS += libgpiops.a
endif

libsdps.a: $(SDPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/sdps_v2_1/src/%)
	$(AR) rcs $@ $^
clean-sdps:
	$(RM) $(SDPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/sdps_v2_1/src/%)
distclean-sdps: clean-sdps
	$(RM) libsdps.a

ifeq ($(CONFIG_SDPS),y)
DRIVERS += libsdps.a
endif

libemacps.a: $(EMACPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/emacps_v2_0/src/%)
	$(AR) rcs $@ $^
clean-emacps:
	$(RM) $(EMACPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/emacps_v2_0/src/%)
distclean-emacps: clean-emacps
	$(RM) libemacps.a

ifeq ($(CONFIG_EMACPS),y)
DRIVERS += libemacps.a
endif

libqspips.a: $(QSPIPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/qspips_v3_0/src/%)
	$(AR) rcs $@ $^
clean-qspips:
	$(RM) $(QSPIPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/qspips_v3_0/src/%)
distclean-qspips: clean-qspips
	$(RM) libqspips.a

ifeq ($(CONFIG_QSPIPS),y)
DRIVERS += libqspips.a
endif

libttcps.a: $(TTCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/ttcps_v2_0/src/%)
	$(AR) rcs $@ $^
clean-ttcps:
	$(RM) $(TTCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/ttcps_v2_0/src/%)
distclean-ttcps: clean-ttcps
	$(RM) libttcps.a

ifeq ($(CONFIG_TTCPS),y)
DRIVERS += libttcps.a
endif

libxadcps.a: $(XADCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/xadcps_v2_0/src/%)
	$(AR) rcs $@ $^
clean-xadcps:
	$(RM) $(XADCPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/xadcps_v2_0/src/%)
distclean-xadcps: clean-xadcps
	$(RM) libxadcps.a

ifeq ($(CONFIG_XADCPS),y)
DRIVERS += libxadcps.a
endif

libiicps.a: $(IICPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/iicps_v2_1/src/%)
	$(AR) rcs $@ $^
clean-iicps:
	$(RM) $(IICPS_OBJ:%=$(ZYNQ_BSP)/ps7_cortexa9_0/libsrc/iicps_v2_1/src/%)
distclean-iicps: clean-iicps
	$(RM) libiicps.a

ifeq ($(CONFIG_IICPS),y)
DRIVERS += libiicps.a
endif

clean-drivers: clean-scuwdt clean-devcfg clean-uartps clean-usbps clean-dmaps clean-gpiops \
		clean-sdps clean-emacps clean-qspips clean-ttcps clean-xadcps clean-iicps
distclean-drivers: distclean-scuwdt distclean-devcfg distclean-uartps distclean-usbps \
		distclean-dmaps distclean-gpiops distclean-sdps distclean-emacps distclean-qspips \
		distclean-ttcps distclean-xadcps distclean-iicps

clean: clean-drivers
distclean: distclean-drivers
